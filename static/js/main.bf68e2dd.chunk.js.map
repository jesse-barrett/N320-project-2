{"version":3,"sources":["logo.svg","components/photos/Tom_Nook.png","components/photos/Brewster.png","components/photos/Pelly.png","components/photos/Redd.png","components/photos/Tortimer.png","components/Villagers.js","App.js","reportWebVitals.js","index.js"],"names":["Villager","useState","error","setError","isLoaded","setIsLoaded","villagers","setVillagers","index","setIndex","villagerPhotos","Nook","Brewster","Pelly","Redd","Tortimer","villagerPhoto","setVillagerPhoto","navUp","length","navDown","checkKey","e","window","event","keyCode","useEffect","fetch","then","response","json","data","Villagers","document","onkeydown","inProp","setInProp","openBubble","state","setState","message","className","onClick","CSSTransition","in","timeout","classNames","astrology","gender","SwitchTransition","mode","src","alt","species","services","Fab","size","color","name","birthday","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bf68e2dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/Tom_Nook.8e6e7f84.png\";","export default __webpack_public_path__ + \"static/media/Brewster.a5f2e45e.png\";","export default __webpack_public_path__ + \"static/media/Pelly.c42fa22b.png\";","export default __webpack_public_path__ + \"static/media/Redd.a8a480b3.png\";","export default __webpack_public_path__ + \"static/media/Tortimer.3cf828cf.png\";","import { render } from \"@testing-library/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Nook from \"./photos/Tom_Nook.png\";\nimport Brewster from \"./photos/Brewster.png\";\nimport Pelly from \"./photos/Pelly.png\";\nimport Redd from \"./photos/Redd.png\";\nimport Tortimer from \"./photos/Tortimer.png\";\nimport { List, Modal, Grid } from \"@material-ui/core\";\nimport { CSSTransition, SwitchTransition } from \"react-transition-group\";\nimport \"./villagers.css\";\n\n//import material UI components here\nimport Fab from \"@mui/material/Fab\";\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\nimport NavigateBeforeIcon from \"@mui/icons-material/NavigateBefore\";\n\nexport default function Villager() {\n  //states to handle the initial project load\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  //states to handle displayed data\n  const [villagers, setVillagers] = useState([]);\n  const [index, setIndex] = useState(0);\n\n  //states to handle the displayed photo\n  let villagerPhotos = [Nook, Brewster, Pelly, Redd, Tortimer];\n  const [villagerPhoto, setVillagerPhoto] = useState(villagerPhotos[0]);\n\n  //retrieve the data\n  useEffect(() => {\n    fetch(\"data/villagers.json\")\n      .then((response) => response.json())\n      .then(\n        (data) => {\n          //save the data\n          setVillagers(data.Villagers);\n          setIsLoaded(true);\n        },\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      );\n  }, []);\n\n  //functions that cycle up and down through the villagers array\n  function navUp() {\n    let limit = villagers.length;\n    if (index == 4) {\n      //must change from 4 if we add\n      setIndex(0);\n      setVillagerPhoto(villagerPhotos[0]); //set the villager photo to the name in the array\n    } else {\n      setIndex(index + 1);\n      setVillagerPhoto(villagerPhotos[index + 1]);\n    }\n  }\n\n  function navDown() {\n    if (index == 0) {\n      setIndex(4); //must also change from 4 if we add\n      setVillagerPhoto(villagerPhotos[4]);\n    } else {\n      setIndex(index - 1);\n      setVillagerPhoto(villagerPhotos[index - 1]);\n    }\n  }\n\n  document.onkeydown = checkKey;\n\n  document.onkeydown = checkKey;\n\n  function checkKey(e) {\n    e = e || window.event;\n\n    if (e.keyCode == \"38\") {\n      // up arrow\n      navUp();\n    } else if (e.keyCode == \"40\") {\n      // down arrow\n      navDown();\n    } else if (e.keyCode == \"37\") {\n      // left arrow\n      navDown();\n    } else if (e.keyCode == \"39\") {\n      // right arrow\n      navUp();\n    }\n  }\n\n  const [inProp, setInProp] = useState([false, false, false, false]);\n\n  function openBubble(index) {\n    if (inProp[index] === false) {\n      // inProp = [false, false, false, false];\n      inProp[index] = true;\n      setInProp([...inProp]);\n    } else {\n      // inProp = [false, false, false, false];\n      inProp[index] = false;\n      setInProp([...inProp]);\n    }\n  }\n  const [state, setState] = useState(false);\n  //error handling\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      //if successful --> return villager bio\n      <div className=\"villagers\">\n        <div className=\"top-content\">\n          <div className=\"info-buttons\">\n            <div\n              className=\"button button1\"\n              onClick={() => {\n                openBubble(0);\n              }}\n            >\n              <CSSTransition in={inProp[0]} timeout={200} classNames=\"bubble\">\n                <div className=\"bubble\">\n                  <p>I'm a {villagers[index].astrology}!</p>\n                </div>\n              </CSSTransition>\n            </div>\n            <div\n              className=\"button button2\"\n              onClick={() => {\n                openBubble(1);\n              }}\n            >\n              <CSSTransition in={inProp[1]} timeout={200} classNames=\"bubble\">\n                <div className=\"bubble\">\n                  <p>{villagers[index].gender}</p>\n                </div>\n              </CSSTransition>\n            </div>\n          </div>\n          <div className=\"big-image\">\n            <SwitchTransition mode=\"out-in\">\n              <CSSTransition\n                key={state}\n                // addEndListener={(node, done) =>\n                //   node.addEventListener(\"transitioned\", done, false)\n                // }\n                timeout={200}\n                classNames=\"vil-img\"\n              >\n                <img className=\"vil-img\" src={villagerPhoto} alt=\"Logo\" />\n              </CSSTransition>\n            </SwitchTransition>\n          </div>\n          <div className=\"info-buttons\">\n            <div\n              className=\"button button3\"\n              onClick={() => {\n                openBubble(2);\n              }}\n            >\n              <CSSTransition in={inProp[2]} timeout={200} classNames=\"bubble\">\n                <div className=\"bubble\">\n                  <p>{villagers[index].species}</p>\n                </div>\n              </CSSTransition>\n            </div>\n            <div\n              className=\"button button4\"\n              onClick={() => {\n                openBubble(3);\n              }}\n            >\n              <CSSTransition in={inProp[3]} timeout={200} classNames=\"bubble\">\n                <div className=\"bubble\">\n                  <p>Services: {villagers[index].services}</p>\n                </div>\n              </CSSTransition>\n            </div>\n          </div>\n        </div>\n        <div className=\"bot-content\">\n          <div className=\"nav-button\">\n            <Fab\n              className=\"down\"\n              size=\"medium\"\n              color=\"primary\"\n              // variant=\"extended\"\n              onClick={() => {\n                setState((state) => !state);\n                navDown();\n              }}\n            >\n              <NavigateBeforeIcon />\n            </Fab>\n          </div>\n          <div className=\"details\">\n            <div className>{villagers[index].name}</div>\n            <hr></hr>\n            <div>Birthday: {villagers[index].birthday}</div>\n          </div>\n          <div className=\"nav-button\">\n            <Fab\n              className=\"up\"\n              size=\"medium\"\n              color=\"primary\"\n              // variant=\"extended\"\n              onClick={() => {\n                setState((state) => !state);\n                navUp();\n              }}\n            >\n              <NavigateNextIcon />\n            </Fab>\n          </div>\n        </div>\n\n        {/* <div className=\"vil-gender\">Gender: {villagers[index].gender}</div>\n        <div className=\"vil-species\">Species: {villagers[index].species}</div>\n        <div className=\"vil-birthday\">\n          Birthday: {villagers[index].birthday}\n        </div>\n        <div className=\"vil-astro\">Astrology: {villagers[index].astrology}</div>\n        <div className=\"services-title\">Services:</div>\n        {villagers[index].services.map((services, ind) => (\n          <div key={ind} className=\"vil-services\">\n            {services}\n          </div>\n        ))}\n        <img className=\"vil-img\" src={villagerPhoto} alt=\"Logo\" />\n        <div className=\"vil-name\">{villagers[index].name}</div> */}\n        {/* <div className=\"fab-container\">\n          <Fab\n            className=\"fab-back\"\n            size=\"medium\"\n            // color=\"primary\"\n            // variant=\"extended\"\n            onClick={navDown}\n          >\n            <NavigateBeforeIcon />\n          </Fab>\n          <Fab\n            className=\"fab-forward\"\n            size=\"medium\"\n            // color=\"primary\"\n            // variant=\"extended\"\n            onClick={navUp}\n          >\n            <NavigateNextIcon />\n          </Fab>\n        </div> */}\n      </div>\n    );\n  }\n}\n\n/* <div>{JSON.stringify(villagers)}</div> */\n","import logo from \"./logo.svg\";\nimport Villager from \"./components/Villagers.js\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Villager />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}